name: K8s Apply (sub)

on: 
  workflow_call:
    inputs:
      environment:
        description: 'Environment to run apply against'
        required: true
        type: string
      timeout_seconds:
        description: 'Kubectl apply wait timeout in seconds for Deployments'
        required: true
        type: number
    secrets:
      AWS_REGION:
        required: true
      EKS_CLUSTER_NAME:
        required: true

defaults:
  run:
    shell: bash

env:
  SCRIPTS_FOLDER: "./interop-infra-commons/scripts/helm"

jobs:
  workflow_setup:
    name: Setup steps
    runs-on: [ self-hosted, "run_id:${{ inputs.environment }}-${{ github.run_id }}" ]
    environment: ${{ inputs.environment }}
    env:
      TARGET_ENVIRONMENT: ${{ inputs.environment }}
    outputs:
      microservices: ${{ steps.set-outputs.outputs.microservices }}
      cronjobs: ${{ steps.set-outputs.outputs.cronjobs }}
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29
      - id: set-outputs
        run: |
          echo "microservices=$(find microservices -type f -path "*/$TARGET_ENVIRONMENT/values.yaml" -exec dirname {} \; | awk -F'/' '{print $2}' | jq -R -s -c 'split("\n")[:-1]')" >> "$GITHUB_OUTPUT"
          echo "cronjobs=$(find jobs -type f -path "*/$TARGET_ENVIRONMENT/values.yaml" -exec dirname {} \; | awk -F'/' '{print $2}' | jq -R -s -c 'split("\n")[:-1]')" >> "$GITHUB_OUTPUT"

  deploy_common_configmaps:
    name: Deploy Common Configmaps
    needs: [ workflow_setup ]
    runs-on: [ self-hosted, "run_id:${{ inputs.environment }}-${{ github.run_id }}" ]
    environment: ${{ inputs.environment }}
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29
      - name: Update Kubeconfig
        id: update_kubeconfig
        run: |
          set -euo pipefail

          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME }}
      - name: Apply commons configmaps
        id: apply_commons_configmap
        env:
          ENVIRONMENT: ${{ inputs.environment }}
        run: |
          set -euo pipefail
          
          commons_configmaps_path="commons/$ENVIRONMENT/configmaps"
          
          if [[ -n "$(ls -A $commons_configmaps_path)" ]]; then
            for f in $commons_configmaps_path/*; do
              kubectl apply -f $f
            done;
          fi

  deploy_ms:
    name: ${{ matrix.microservice }}
    runs-on: [ self-hosted, "run_id:${{ inputs.environment }}-${{ github.run_id }}" ]
    environment: ${{ inputs.environment }}
    needs: [workflow_setup, deploy_common_configmaps]
    strategy:
      matrix:
        microservice: ${{ fromJson(needs.workflow_setup.outputs.microservices) }}
      fail-fast: false
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29
      - name: Checkout scripts repository
        uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29
        with:
          repository: pagopa/interop-infra-commons
          path: interop-infra-commons 
          fetch-depth: 0
          sparse-checkout: 'scripts/helm'
          ref: ${{ vars.INFRA_COMMONS_TAG }}
          ssh-key: ${{ secrets.PRIVATE_REPOS_SSH_KEY }}
      - name: Set kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME }}
      - name: Deploy
        env:
          MICROSERVICE_NAME: ${{ matrix.microservice }}
          K8S_NAMESPACE: ${{ inputs.environment }}
          TIMEOUT_SECONDS: ${{ inputs.timeout_seconds }}
          FORCE_ROLLOUT: ${{ inputs.force_restart }}
          
        run: |
          set -euo pipefail

          #!/bin/sh
          TIMEOUT="${TIMEOUT_SECONDS}s"
          # Check if a rollout is in progress
          echo "INFO - Verifying no active rollouts; waiting up to $TIMEOUT if required"
          if ! kubectl rollout status -n "$K8S_NAMESPACE" "deployment/$MICROSERVICE_NAME" --timeout="$TIMEOUT" --watch >/dev/null 2>&1; then
            echo "::error::ERROR - A rollout is already in progress for $MICROSERVICE_NAME in namespace $K8S_NAMESPACE"
            exit 1
          fi

          echo "INFO - Apply changes for $MICROSERVICE_NAME."
          "$SCRIPTS_FOLDER/kubectlApply-svc-single-standalone.sh" --debug --environment "$K8S_NAMESPACE -m $MICROSERVICE_NAME" --output console
          sleep 5

          DESIRED_REPLICAS=$(kubectl get deployment "$MICROSERVICE_NAME" -n "$K8S_NAMESPACE" -o jsonpath='{.spec.replicas}')
          echo "INFO - Desired replicas: $DESIRED_REPLICAS"
          if [ "$DESIRED_REPLICAS" -eq 0 ]; then
            echo "::info::INFO - Desired replicas for $MICROSERVICE_NAME are 0. Stopping further operations."
            exit 0
          fi

          # Check if the force rollout flag is true
          if [ "$FORCE_ROLLOUT" = true ]; then
            echo "::info::INFO - Force rollout restart requested $MICROSERVICE_NAME." 
            if ! kubectl rollout status -n "$K8S_NAMESPACE" "deployment/$MICROSERVICE_NAME" --timeout=1s --watch >/dev/null 2>&1; then
              echo "::info::INFO - Rollout alredy active for $MICROSERVICE_NAME. No force restart needed."
            else
              echo "INFO - No rollout in progress, forcing a rollout restart."
              kubectl rollout restart -n "$K8S_NAMESPACE" "deployment/$MICROSERVICE_NAME"
            fi
          fi 
          
          echo "INFO - Wait for the rollout of the $MICROSERVICE_NAME to finish (Max $TIMEOUT)."
          if ! kubectl rollout status -n "$K8S_NAMESPACE" "deployment/$MICROSERVICE_NAME" --timeout="$TIMEOUT" --watch >/dev/null 2>&1; then
            echo "::error::ERROR - Rollout for $MICROSERVICE_NAME failed or exceeded $TIMEOUT."
            exit 1
          fi
          echo "INFO - Rollout for $MICROSERVICE_NAME completed successfully."
            
  deploy_cj:
    name: ${{ matrix.cronjob }}
    runs-on: [ self-hosted, "run_id:${{ inputs.environment }}-${{ github.run_id }}" ]
    environment: ${{ inputs.environment }}
    needs: [workflow_setup, deploy_common_configmaps]
    strategy:
      matrix:
        cronjob: ${{ fromJson(needs.workflow_setup.outputs.cronjobs) }}
      fail-fast: false
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29
      - name: Checkout scripts repository
        uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29
        with:
          repository: pagopa/interop-infra-commons
          path: interop-infra-commons 
          fetch-depth: 0
          sparse-checkout: 'scripts/helm'
          ref: ${{ vars.INFRA_COMMONS_TAG }}
          ssh-key: ${{ secrets.PRIVATE_REPOS_SSH_KEY }}
      - name: Set kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME }}
      - name: Deploy
        env:
          CRONJOB_NAME: ${{ matrix.cronjob }}
          K8S_NAMESPACE: ${{ inputs.environment }}
        run: |
          set -euo pipefail

          $SCRIPTS_FOLDER/kubectlApply-cron-single-standalone.sh --debug --environment $K8S_NAMESPACE -j $CRONJOB_NAME --output console 
