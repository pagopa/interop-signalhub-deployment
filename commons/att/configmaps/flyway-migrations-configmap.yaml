apiVersion: v1
kind: ConfigMap
metadata:
  name: common-flyway-migrations
  namespace: att
data:
  V1__Init.sql: |-
    CREATE SCHEMA IF NOT EXISTS "${NAMESPACE}_interop";
    CREATE SCHEMA IF NOT EXISTS "${NAMESPACE}_signalhub";

    GRANT USAGE ON SCHEMA "${NAMESPACE}_interop" TO
      batch_cleanup_user,
      pull_signal_user,
      push_signal_user,
      signal_persister_user,
      eservice_consumer_user,
      agreement_consumer_user,
      purpose_consumer_user;
      
    GRANT USAGE ON SCHEMA "${NAMESPACE}_signalhub" TO
      batch_cleanup_user,
      pull_signal_user,
      push_signal_user,
      signal_persister_user;

    CREATE TABLE IF NOT EXISTS "${NAMESPACE}_interop"."eservice_producer" (
      eservice_id     VARCHAR (255) NOT NULL,
      producer_id     VARCHAR (255) NOT NULL,
      tmst_insert     TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
      event_stream_id VARCHAR (255) NOT NULL DEFAULT gen_random_uuid(),
      event_version_id   BIGINT NOT NULL DEFAULT -1,
      UNIQUE (event_stream_id, event_version_id),
      UNIQUE (eservice_id, producer_id),
      PRIMARY KEY (eservice_id)
    );
    GRANT SELECT, UPDATE, INSERT, DELETE ON TABLE "${NAMESPACE}_interop".eservice_producer TO eservice_consumer_user;

    CREATE TABLE IF NOT EXISTS "${NAMESPACE}_interop"."eservice" (
      eservice_id       VARCHAR (255) NOT NULL,
      descriptor_id     VARCHAR (255) NOT NULL,
      producer_id       VARCHAR (255) NOT NULL,
      "state"           VARCHAR (255) NOT NULL,
      event_stream_id   VARCHAR (255) NOT NULL DEFAULT gen_random_uuid(),
      event_version_id  BIGINT NOT NULL DEFAULT -1,
      enabled_signal_hub  BOOLEAN,
      tmst_insert       TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
      tmst_last_edit    TIMESTAMPTZ,
      UNIQUE (event_stream_id, event_version_id, descriptor_id),
      UNIQUE (eservice_id, descriptor_id, producer_id),
      PRIMARY KEY (eservice_id, descriptor_id)
    );
    CREATE INDEX IF NOT EXISTS eservice_index_id_and_producer_and_enabled_sh_and_state ON "${NAMESPACE}_interop"."eservice"(eservice_id, producer_id, enabled_signal_hub, upper(state));
    GRANT SELECT ON TABLE "${NAMESPACE}_interop".eservice TO pull_signal_user;
    GRANT SELECT ON TABLE "${NAMESPACE}_interop".eservice TO signal_persister_user;
    GRANT SELECT, UPDATE, INSERT, DELETE ON TABLE "${NAMESPACE}_interop".eservice TO eservice_consumer_user;
    GRANT SELECT ON TABLE "${NAMESPACE}_interop".eservice TO push_signal_user;

    CREATE TABLE IF NOT EXISTS "${NAMESPACE}_interop"."agreement" (
        agreement_id      VARCHAR (255) NOT NULL,
        eservice_id       VARCHAR (255) NOT NULL,
        descriptor_id     VARCHAR (255) NOT NULL,
        consumer_id       VARCHAR (255) NOT NULL,
        "state"           VARCHAR (255) NOT NULL,
        event_stream_id   VARCHAR (255) NOT NULL DEFAULT gen_random_uuid(),
        event_version_id  BIGINT NOT NULL DEFAULT -1,
        tmst_insert       TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
        tmst_last_edit    TIMESTAMPTZ,
        UNIQUE (event_stream_id, event_version_id),
        PRIMARY KEY (agreement_id)
    );
    CREATE INDEX IF NOT EXISTS agreement_index_eservice_and_consumer_and_state ON "${NAMESPACE}_interop"."agreement"(eservice_id, consumer_id, upper(state));
    GRANT SELECT ON TABLE "${NAMESPACE}_interop".agreement TO pull_signal_user;
    GRANT SELECT ON TABLE "${NAMESPACE}_interop".agreement TO signal_persister_user;
    GRANT SELECT, UPDATE, INSERT, DELETE ON TABLE "${NAMESPACE}_interop".agreement TO agreement_consumer_user;
    GRANT SELECT ON TABLE "${NAMESPACE}_interop".agreement TO push_signal_user;

    CREATE TABLE IF NOT EXISTS "${NAMESPACE}_interop"."purpose" (
        purpose_id       VARCHAR (255) NOT NULL,
        purpose_version_id  VARCHAR (255),
        purpose_state    VARCHAR (255) NOT NULL,
        eservice_id     VARCHAR (255) NOT NULL,
        consumer_id     VARCHAR (255) NOT NULL,
        event_stream_id VARCHAR (255) NOT NULL DEFAULT gen_random_uuid(),
        event_version_id   BIGINT NOT NULL DEFAULT -1,
        tmst_insert     TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
        tmst_last_edit  TIMESTAMPTZ,
        UNIQUE (event_stream_id, event_version_id),
        UNIQUE (purpose_id, eservice_id, consumer_id),
        PRIMARY KEY (purpose_id)
    );
    CREATE INDEX IF NOT EXISTS purpose_index_eservice_and_consumer_and_state ON "${NAMESPACE}_interop"."purpose"(purpose_id, consumer_id, upper(purpose_state), eservice_id);
    GRANT SELECT ON TABLE "${NAMESPACE}_interop".purpose TO pull_signal_user;
    GRANT SELECT ON TABLE "${NAMESPACE}_interop".purpose TO signal_persister_user;
    GRANT SELECT, UPDATE, INSERT, DELETE ON TABLE "${NAMESPACE}_interop".purpose TO purpose_consumer_user;
    GRANT SELECT ON TABLE "${NAMESPACE}_interop".purpose TO push_signal_user;

    CREATE TABLE IF NOT EXISTS "${NAMESPACE}_signalhub"."signal" (
        id             SERIAL PRIMARY KEY,
        correlation_id VARCHAR(255) NOT NULL,
        signal_id      BIGINT        NOT NULL,
        object_id      VARCHAR (255)  NOT NULL,
        eservice_id    VARCHAR (255)  NOT NULL,
        object_type    VARCHAR (255)  NOT NULL,
        signal_type    VARCHAR (255)  NOT NULL,
        tmst_insert    TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
    );
    CREATE INDEX IF NOT exists signal_index_signal_id ON "${NAMESPACE}_signalhub"."signal"(signal_id);
    CREATE INDEX IF NOT exists signal_index_eservice_id on "${NAMESPACE}_signalhub"."signal"(eservice_id);
    CREATE UNIQUE INDEX IF NOT EXISTS SIGNAL_INDEX_ON_SIGNAL_ID_ESERVICE_ID ON "${NAMESPACE}_signalhub"."signal"(eservice_id, signal_id);
    GRANT SELECT ON TABLE "${NAMESPACE}_signalhub".signal TO pull_signal_user;
    GRANT SELECT, UPDATE, INSERT ON TABLE "${NAMESPACE}_signalhub".signal TO signal_persister_user;
    GRANT SELECT, DELETE ON TABLE "${NAMESPACE}_signalhub".signal TO batch_cleanup_user;
    GRANT SELECT ON TABLE "${NAMESPACE}_signalhub".signal TO push_signal_user;
    GRANT USAGE ON SEQUENCE "${NAMESPACE}_signalhub".signal_id_seq TO signal_persister_user;

    CREATE TABLE IF NOT EXISTS "${NAMESPACE}_signalhub"."dead_signal" (
        id             SERIAL PRIMARY KEY,
        correlation_id VARCHAR(255)   NOT NULL,
        signal_id      BIGINT        NOT NULL,
        object_id      VARCHAR (255)  NOT NULL,
        eservice_id    VARCHAR (255)  NOT NULL,
        object_type    VARCHAR (255)  NOT NULL,
        signal_type    VARCHAR (255)  NOT NULL,
        tmst_insert    TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
        error_reason   VARCHAR(255)  NOT NULL
    );
    CREATE INDEX IF NOT EXISTS DEAD_SIGNAL_INDEX_ON_CORRELATION_ID ON "${NAMESPACE}_signalhub"."dead_signal"(correlation_id);
    CREATE INDEX IF NOT EXISTS DEAD_SIGNAL_INDEX_ON_SIGNAL_ID ON "${NAMESPACE}_signalhub"."dead_signal"(signal_id);
    CREATE INDEX IF NOT EXISTS DEAD_SIGNAL_INDEX_ON_ESERVICE_ID on "${NAMESPACE}_signalhub"."dead_signal"(eservice_id);
    GRANT SELECT ON TABLE "${NAMESPACE}_signalhub".dead_signal TO pull_signal_user;
    GRANT SELECT, UPDATE, INSERT ON TABLE "${NAMESPACE}_signalhub".dead_signal TO signal_persister_user;
    GRANT USAGE ON SEQUENCE "${NAMESPACE}_signalhub".dead_signal_id_seq TO signal_persister_user;

    CREATE TABLE IF NOT EXISTS "${NAMESPACE}_signalhub"."tracing_batch_cleanup" (
        batch_id         SERIAL PRIMARY KEY,
        tmst_start_at    TIMESTAMPTZ,
        tmst_end_at      TIMESTAMPTZ,
        error            VARCHAR (255),
        tmst_delete_from TIMESTAMPTZ,
        count_deleted    BIGINT
    );
    GRANT SELECT, UPDATE, INSERT, DELETE ON TABLE "${NAMESPACE}_signalhub".tracing_batch_cleanup TO batch_cleanup_user;
    GRANT SELECT, USAGE ON SEQUENCE "${NAMESPACE}_signalhub".tracing_batch_cleanup_batch_id_seq TO batch_cleanup_user;
